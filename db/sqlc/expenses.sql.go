// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: expenses.sql

package db

import (
	"context"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (group_id, member_id, description, amount, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
RETURNING id, group_id, member_id, description, amount, created_at, updated_at
`

type CreateExpenseParams struct {
	GroupID     int32  `json:"group_id"`
	MemberID    int32  `json:"member_id"`
	Description string `json:"description"`
	Amount      string `json:"amount"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense,
		arg.GroupID,
		arg.MemberID,
		arg.Description,
		arg.Amount,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.MemberID,
		&i.Description,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses
WHERE id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteExpense, id)
	return err
}

const getExpensesByGroup = `-- name: GetExpensesByGroup :many
SELECT e.id, e.group_id, e.member_id, e.description, e.amount, e.created_at, e.updated_at
FROM expenses e
WHERE e.group_id = $1
ORDER BY e.created_at DESC
`

func (q *Queries) GetExpensesByGroup(ctx context.Context, groupID int32) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getExpensesByGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Expense{}
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.MemberID,
			&i.Description,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :exec
UPDATE expenses
SET description = $1, amount = $2, updated_at = NOW()
WHERE id = $3
`

type UpdateExpenseParams struct {
	Description string `json:"description"`
	Amount      string `json:"amount"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) error {
	_, err := q.db.ExecContext(ctx, updateExpense, arg.Description, arg.Amount, arg.ID)
	return err
}
