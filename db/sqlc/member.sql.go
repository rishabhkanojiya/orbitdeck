// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: member.sql

package db

import (
	"context"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (name, email, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
RETURNING id, name, email, created_at, updated_at
`

type CreateMemberParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember, arg.Name, arg.Email)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM members
WHERE id = $1
`

func (q *Queries) DeleteMember(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMember, id)
	return err
}

const getMemberByID = `-- name: GetMemberByID :one
SELECT id, name, email, created_at, updated_at
FROM members
WHERE id = $1
`

func (q *Queries) GetMemberByID(ctx context.Context, id int32) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMemberByID, id)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMember = `-- name: UpdateMember :exec
UPDATE members
SET name = $1, email = $2, updated_at = NOW()
WHERE id = $3
`

type UpdateMemberParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
	ID    int32  `json:"id"`
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) error {
	_, err := q.db.ExecContext(ctx, updateMember, arg.Name, arg.Email, arg.ID)
	return err
}
