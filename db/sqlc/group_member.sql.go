// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: group_member.sql

package db

import (
	"context"
)

const addMemberToGroup = `-- name: AddMemberToGroup :exec
INSERT INTO group_members (group_id, member_id, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
ON CONFLICT DO NOTHING
`

type AddMemberToGroupParams struct {
	GroupID  int32 `json:"group_id"`
	MemberID int32 `json:"member_id"`
}

func (q *Queries) AddMemberToGroup(ctx context.Context, arg AddMemberToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addMemberToGroup, arg.GroupID, arg.MemberID)
	return err
}

const getMembersByGroup = `-- name: GetMembersByGroup :many
SELECT m.id, m.name, m.email
FROM members m
JOIN group_members gm ON m.id = gm.member_id
WHERE gm.group_id = $1
`

type GetMembersByGroupRow struct {
	ID    int32  `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) GetMembersByGroup(ctx context.Context, groupID int32) ([]GetMembersByGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, getMembersByGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembersByGroupRow{}
	for rows.Next() {
		var i GetMembersByGroupRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMemberFromGroup = `-- name: RemoveMemberFromGroup :exec
DELETE FROM group_members
WHERE group_id = $1 AND member_id = $2
`

type RemoveMemberFromGroupParams struct {
	GroupID  int32 `json:"group_id"`
	MemberID int32 `json:"member_id"`
}

func (q *Queries) RemoveMemberFromGroup(ctx context.Context, arg RemoveMemberFromGroupParams) error {
	_, err := q.db.ExecContext(ctx, removeMemberFromGroup, arg.GroupID, arg.MemberID)
	return err
}
