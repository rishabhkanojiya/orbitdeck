// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: deployments.sql

package db

import (
	"context"
	"database/sql"
)

const countDeployments = `-- name: CountDeployments :one
SELECT COUNT(*) FROM deployments
`

func (q *Queries) CountDeployments(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countDeployments)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createComponent = `-- name: CreateComponent :one
INSERT INTO components (deployment_id, name, replica_count, service_port)
VALUES ($1, $2, $3, $4)
RETURNING id, deployment_id, name, replica_count, service_port
`

type CreateComponentParams struct {
	DeploymentID int64         `json:"deployment_id"`
	Name         string        `json:"name"`
	ReplicaCount int32         `json:"replica_count"`
	ServicePort  sql.NullInt32 `json:"service_port"`
}

func (q *Queries) CreateComponent(ctx context.Context, arg CreateComponentParams) (Component, error) {
	row := q.db.QueryRowContext(ctx, createComponent,
		arg.DeploymentID,
		arg.Name,
		arg.ReplicaCount,
		arg.ServicePort,
	)
	var i Component
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.Name,
		&i.ReplicaCount,
		&i.ServicePort,
	)
	return i, err
}

const createDeployment = `-- name: CreateDeployment :one
INSERT INTO deployments (name, environment, helm_release)
VALUES ($1, $2, $3)
RETURNING id, name, environment, helm_release, created_at
`

type CreateDeploymentParams struct {
	Name        string         `json:"name"`
	Environment Environment    `json:"environment"`
	HelmRelease sql.NullString `json:"helm_release"`
}

func (q *Queries) CreateDeployment(ctx context.Context, arg CreateDeploymentParams) (Deployment, error) {
	row := q.db.QueryRowContext(ctx, createDeployment, arg.Name, arg.Environment, arg.HelmRelease)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Environment,
		&i.HelmRelease,
		&i.CreatedAt,
	)
	return i, err
}

const createEnvVar = `-- name: CreateEnvVar :one
INSERT INTO env_vars (component_id, key, value)
VALUES ($1, $2, $3)
RETURNING id, component_id, key, value
`

type CreateEnvVarParams struct {
	ComponentID int64  `json:"component_id"`
	Key         string `json:"key"`
	Value       string `json:"value"`
}

func (q *Queries) CreateEnvVar(ctx context.Context, arg CreateEnvVarParams) (EnvVar, error) {
	row := q.db.QueryRowContext(ctx, createEnvVar, arg.ComponentID, arg.Key, arg.Value)
	var i EnvVar
	err := row.Scan(
		&i.ID,
		&i.ComponentID,
		&i.Key,
		&i.Value,
	)
	return i, err
}

const createImage = `-- name: CreateImage :one
INSERT INTO images (component_id, repository, tag)
VALUES ($1, $2, $3)
RETURNING id, component_id, repository, tag
`

type CreateImageParams struct {
	ComponentID int64  `json:"component_id"`
	Repository  string `json:"repository"`
	Tag         string `json:"tag"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage, arg.ComponentID, arg.Repository, arg.Tag)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.ComponentID,
		&i.Repository,
		&i.Tag,
	)
	return i, err
}

const createResources = `-- name: CreateResources :one
INSERT INTO resources (component_id, requests_cpu, requests_memory, limits_cpu, limits_memory)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, component_id, requests_cpu, requests_memory, limits_cpu, limits_memory
`

type CreateResourcesParams struct {
	ComponentID    int64          `json:"component_id"`
	RequestsCpu    sql.NullString `json:"requests_cpu"`
	RequestsMemory sql.NullString `json:"requests_memory"`
	LimitsCpu      sql.NullString `json:"limits_cpu"`
	LimitsMemory   sql.NullString `json:"limits_memory"`
}

func (q *Queries) CreateResources(ctx context.Context, arg CreateResourcesParams) (Resource, error) {
	row := q.db.QueryRowContext(ctx, createResources,
		arg.ComponentID,
		arg.RequestsCpu,
		arg.RequestsMemory,
		arg.LimitsCpu,
		arg.LimitsMemory,
	)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.ComponentID,
		&i.RequestsCpu,
		&i.RequestsMemory,
		&i.LimitsCpu,
		&i.LimitsMemory,
	)
	return i, err
}

const getComponentEnvVars = `-- name: GetComponentEnvVars :many
SELECT key, value FROM env_vars WHERE component_id = $1
`

type GetComponentEnvVarsRow struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) GetComponentEnvVars(ctx context.Context, componentID int64) ([]GetComponentEnvVarsRow, error) {
	rows, err := q.db.QueryContext(ctx, getComponentEnvVars, componentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetComponentEnvVarsRow{}
	for rows.Next() {
		var i GetComponentEnvVarsRow
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeployment = `-- name: GetDeployment :one
SELECT id, name, environment, helm_release, created_at FROM deployments WHERE id = $1
`

func (q *Queries) GetDeployment(ctx context.Context, id int64) (Deployment, error) {
	row := q.db.QueryRowContext(ctx, getDeployment, id)
	var i Deployment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Environment,
		&i.HelmRelease,
		&i.CreatedAt,
	)
	return i, err
}

const getDeploymentComponents = `-- name: GetDeploymentComponents :many
SELECT 
    c.id, c.name, c.replica_count, c.service_port,
    i.repository, i.tag,
    r.requests_cpu, r.requests_memory, r.limits_cpu, r.limits_memory
FROM components c
LEFT JOIN images i ON i.component_id = c.id
LEFT JOIN resources r ON r.component_id = c.id
WHERE c.deployment_id = $1
`

type GetDeploymentComponentsRow struct {
	ID             int64          `json:"id"`
	Name           string         `json:"name"`
	ReplicaCount   int32          `json:"replica_count"`
	ServicePort    sql.NullInt32  `json:"service_port"`
	Repository     sql.NullString `json:"repository"`
	Tag            sql.NullString `json:"tag"`
	RequestsCpu    sql.NullString `json:"requests_cpu"`
	RequestsMemory sql.NullString `json:"requests_memory"`
	LimitsCpu      sql.NullString `json:"limits_cpu"`
	LimitsMemory   sql.NullString `json:"limits_memory"`
}

func (q *Queries) GetDeploymentComponents(ctx context.Context, deploymentID int64) ([]GetDeploymentComponentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeploymentComponents, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDeploymentComponentsRow{}
	for rows.Next() {
		var i GetDeploymentComponentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ReplicaCount,
			&i.ServicePort,
			&i.Repository,
			&i.Tag,
			&i.RequestsCpu,
			&i.RequestsMemory,
			&i.LimitsCpu,
			&i.LimitsMemory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDeploymentsPaginated = `-- name: ListDeploymentsPaginated :many
SELECT id, name, environment, helm_release, created_at FROM deployments
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListDeploymentsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDeploymentsPaginated(ctx context.Context, arg ListDeploymentsPaginatedParams) ([]Deployment, error) {
	rows, err := q.db.QueryContext(ctx, listDeploymentsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Deployment{}
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Environment,
			&i.HelmRelease,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
