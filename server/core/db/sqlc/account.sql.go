// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package db

import (
	"context"
)

const addCoreBalance = `-- name: AddCoreBalance :one
UPDATE cores
SET balance = balance + $1
WHERE id = $2
RETURNING id, owner, balance, currency, created_at
`

type AddCoreBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddCoreBalance(ctx context.Context, arg AddCoreBalanceParams) (Core, error) {
	row := q.db.QueryRowContext(ctx, addCoreBalance, arg.Amount, arg.ID)
	var i Core
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createCore = `-- name: CreateCore :one
INSERT INTO cores (
  owner,
  balance,
  currency
) VALUES (
  $1, $2, $3
) RETURNING id, owner, balance, currency, created_at
`

type CreateCoreParams struct {
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateCore(ctx context.Context, arg CreateCoreParams) (Core, error) {
	row := q.db.QueryRowContext(ctx, createCore, arg.Owner, arg.Balance, arg.Currency)
	var i Core
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCore = `-- name: DeleteCore :exec
DELETE FROM cores
WHERE id = $1
`

func (q *Queries) DeleteCore(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCore, id)
	return err
}

const getCore = `-- name: GetCore :one
SELECT id, owner, balance, currency, created_at FROM cores
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCore(ctx context.Context, id int64) (Core, error) {
	row := q.db.QueryRowContext(ctx, getCore, id)
	var i Core
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getCoreForUpdate = `-- name: GetCoreForUpdate :one
SELECT id, owner, balance, currency, created_at FROM cores
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetCoreForUpdate(ctx context.Context, id int64) (Core, error) {
	row := q.db.QueryRowContext(ctx, getCoreForUpdate, id)
	var i Core
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listCores = `-- name: ListCores :many
SELECT id, owner, balance, currency, created_at FROM cores
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListCoresParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListCores(ctx context.Context, arg ListCoresParams) ([]Core, error) {
	rows, err := q.db.QueryContext(ctx, listCores, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Core{}
	for rows.Next() {
		var i Core
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCore = `-- name: UpdateCore :one
UPDATE cores
SET balance = $2
WHERE id = $1
RETURNING id, owner, balance, currency, created_at
`

type UpdateCoreParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateCore(ctx context.Context, arg UpdateCoreParams) (Core, error) {
	row := q.db.QueryRowContext(ctx, updateCore, arg.ID, arg.Balance)
	var i Core
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
