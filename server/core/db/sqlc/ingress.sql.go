// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ingress.sql

package db

import (
	"context"
)

const createIngress = `-- name: CreateIngress :one
INSERT INTO ingresses (deployment_id, host, path, service_port)
VALUES ($1, $2, $3, $4)
RETURNING id, deployment_id, host, path, service_port, created_at
`

type CreateIngressParams struct {
	DeploymentID int64  `json:"deployment_id"`
	Host         string `json:"host"`
	Path         string `json:"path"`
	ServicePort  int32  `json:"service_port"`
}

func (q *Queries) CreateIngress(ctx context.Context, arg CreateIngressParams) (Ingress, error) {
	row := q.db.QueryRowContext(ctx, createIngress,
		arg.DeploymentID,
		arg.Host,
		arg.Path,
		arg.ServicePort,
	)
	var i Ingress
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.Host,
		&i.Path,
		&i.ServicePort,
		&i.CreatedAt,
	)
	return i, err
}

const deleteIngress = `-- name: DeleteIngress :exec
DELETE FROM ingresses WHERE id = $1
`

func (q *Queries) DeleteIngress(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIngress, id)
	return err
}

const getIngressByDeployment = `-- name: GetIngressByDeployment :many
SELECT id, deployment_id, host, path, service_port, created_at FROM ingresses WHERE deployment_id = $1
`

func (q *Queries) GetIngressByDeployment(ctx context.Context, deploymentID int64) ([]Ingress, error) {
	rows, err := q.db.QueryContext(ctx, getIngressByDeployment, deploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ingress{}
	for rows.Next() {
		var i Ingress
		if err := rows.Scan(
			&i.ID,
			&i.DeploymentID,
			&i.Host,
			&i.Path,
			&i.ServicePort,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIngressByHost = `-- name: GetIngressByHost :one
SELECT id, deployment_id, host, path, service_port, created_at FROM ingresses WHERE host = $1 LIMIT 1
`

func (q *Queries) GetIngressByHost(ctx context.Context, host string) (Ingress, error) {
	row := q.db.QueryRowContext(ctx, getIngressByHost, host)
	var i Ingress
	err := row.Scan(
		&i.ID,
		&i.DeploymentID,
		&i.Host,
		&i.Path,
		&i.ServicePort,
		&i.CreatedAt,
	)
	return i, err
}
